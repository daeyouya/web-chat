# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:

  ##################################################
  # 1. 빌드
  ##################################################
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
    # 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build
    # 빌드
    #- name: Build package
    #  run: ./gradlew bootJar
    # 빌드 아티팩트 확인
    - name: Show structure of artifact files
      run: ls -ahl ./build/libs/*.jar
    # 빌드 아티팩트 업로드
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: artifact1
        path: build/libs/*.jar
        
  ##################################################
  # 2. 배포
  ##################################################
  deploy:
    needs: [ build ] # 빌드 성공이 선행되어야 함
    runs-on: ubuntu-latest
    steps:
      # 아티팩트 전송을 위한 임시 공간
      - name: Create distribute
        run: mkdir ~/dist
      # 빌드된 아티팩트 임시 저장공간으로 다운로드
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact1
          path: dist
      # 배포할 아티팩트 확인
      - name: Show structure of downloaded files
        run: |
          ls -alh dist
      # 서버에 아티팩트 전송
      - name: Transfer artifact
        uses: appleboy/scp-action@master
        with:
          username: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          rm: true
          source: "dist/*.jar"
          target: "/home/application/websocket/artifact"
          strip_components: 1 # 작업에 사용했던 dist 디렉토리를 경로상에서 제거
      # 전송된 아티팩트 확인
      - name: Show structure of transfer files
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/application/websocket/artifact
            ls -alh

  ##################################################
  # 3. 서비스 재시작
  ##################################################
  service_restart:
    needs: [ build, deploy ] # 빌드, 배포 성공이 선행되어야 함
    runs-on: ubuntu-latest
    steps:
      - name: Call service restart
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sh /home/application/websocket/bin/websocket.sh restart
